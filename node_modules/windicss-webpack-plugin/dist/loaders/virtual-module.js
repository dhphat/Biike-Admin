"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importStar(require("fs"));
const plugin_utils_1 = require("@windicss/plugin-utils");
const constants_1 = require("../constants");
const debug_1 = __importDefault(require("../debug"));
async function VirtualModule(source) {
    const callback = this.async();
    if (!this._compiler) {
        callback(null, source);
        return;
    }
    this.cacheable(false);
    const service = this._compiler.$windyCSSService;
    const match = this.resource.match(constants_1.MODULE_ID_VIRTUAL_TEST);
    if (!service || !match) {
        const error = new Error(`Failed to match the resource "${this.resource}" to a WindiCSS virtual module.`);
        this.emitError(error);
        callback(error, source);
        return;
    }
    const layer = match[1] || undefined;
    const isBoot = source.indexOf('(boot)') > 0;
    debug_1.default.loader(`Generating "${this.resource}" using layer "${layer}${isBoot ? '" as boot ' : ' as hmr'}`);
    const generateCSS = async (layer) => {
        try {
            // avoid duplicate scanning on HMR
            if (service.scanned && service.options.enableScan)
                service.options.enableScan = false;
            const css = (await service.generateCSS(layer)).replace('(boot)', '');
            service.virtualModules.set(layer !== null && layer !== void 0 ? layer : 'all', css);
            callback(null, css);
        }
        catch (e) {
            const error = JSON.stringify(e, null, 2);
            this.emitError(`[Windi CSS] Failed to generate CSS. Error: ${error}`);
            callback(e, `${source}\n` + `/* Error: ${error}*/`);
        }
    };
    if (isBoot) {
        await generateCSS(layer);
        return;
    }
    // Make sure we're hot
    const dirtyFiles = Array.from(service.dirty);
    if (dirtyFiles.length === 0) {
        callback(null, source);
        return;
    }
    // Need to do a complete re-scan, we got a null entry on the watcher so we know a file updated but don't know which one
    if (service.dirty.has('all-modules')) {
        const contents = await Promise.all([...(await service.getFiles())]
            .filter(id => service.isDetectTarget(id))
            .map(async (id) => [await fs_1.default.promises.readFile(id, 'utf-8'), id]));
        await Promise.all(contents.map(async ([content, id]) => {
            if (service.isCssTransformTarget(id))
                return service.transformCSS(content, id);
            else
                return service.extractFile(content, id, true);
        }));
    }
    else {
        const configFileUpdated = dirtyFiles.filter((id) => {
            return plugin_utils_1.defaultConfigureFiles.filter((config) => {
                return id.endsWith(config);
            }).length > 0;
        }).length > 0;
        // If it is a config update we init the service again
        if (configFileUpdated) {
            service.clearCache();
            await service.init();
        }
        else {
            // Get all of our dirty files and parse their content
            const contents = await Promise.all(dirtyFiles.map((id) => {
                return {
                    data: fs_1.readFileSync(id, { encoding: 'utf-8' }),
                    id,
                };
            }));
            // Extract the content into windicss service
            for (const content of contents) {
                try {
                    await service.extractFile(content.data, content.id, service.options.transformGroups);
                }
                catch (e) {
                    this.emitWarning(`[Windi CSS] Failed to extract classes from resource: ${content.id}.`);
                }
            }
        }
    }
    // Don't process the same files until they're dirty again
    service.dirty.clear();
    await generateCSS(layer);
}
exports.default = VirtualModule;
